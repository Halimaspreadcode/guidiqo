generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum DeletionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id           String   @id @default(cuid())
  stackId      String   @unique
  email        String   @unique
  name         String?
  profileImage String?
  role         UserRole @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  brands                Brand[]
  accountDeletionRequest AccountDeletionRequest?
}

model AccountDeletionRequest {
  id           String         @id @default(cuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  reason       String?
  status       DeletionStatus @default(PENDING)
  
  requestedAt  DateTime       @default(now())
  scheduledFor DateTime
  completedAt  DateTime?
  cancelledAt  DateTime?
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  @@index([status])
  @@index([scheduledFor])
}

model Brand {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  prompt      String
  
  // Brand Identity
  primaryColor    String?
  secondaryColor  String?
  accentColor     String?
  
  primaryFont     String?
  secondaryFont   String?
  
  logoStyle       String?
  brandPersonality String?
  targetAudience  String?
  
  // Status
  isCompleted Boolean @default(false)
  currentStep Int     @default(1)
  isInLibrary Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

